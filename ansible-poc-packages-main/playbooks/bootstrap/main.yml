---
- name: Bootstrap AAP POC Environment
  hosts: all
  gather_facts: false
  vars: 
    github_username: "djgoosen"
    github_password: "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" # this will become a survey prompt
    machine_username: "vagrant"
    machine_password: "vagrant"
    controller_oauthtoken: "dXjeeaTZJ67cIBIHzRSELRlR94qfOw" # this will become a survey prompt
    poc_package: "rhel_patching" 
    scm_url: "https://github.com/1eve1Up/ansible-poc-packages.git"
  vars_files:
    - "job_template_vars/{{ poc_package }}/main.yml"
      
  collections:
    - ansible.controller

  tasks:

    - name: Create POC organization
      organization:
        name: "POC"
        description: "This organization name/description can be changed after bootstrap"
        state: present
        # controller_config_file: "~/tower_cli.cfg"
        validate_certs: false
        controller_oauthtoken: "{{ controller_oauthtoken }}"

    # # Customer will need to enter their own Machine credentials:
    # - name: "Add machine credential: Ansible POC Packages Controller" 
    #   ansible.controller.credential:
    #     name: "POC AAP Controller"
    #     organization: "POC"
    #     credential_type: Machine
    #     # controller_username: "{{ machine_username }}"
    #     # controller_password: "{{ machine_password }}"
    #     controller_oauthtoken: "{{ controller_oauthtoken }}"
    #     state: present
    #     validate_certs: false

      # This will become a unique customer repo with only one package:
    - name: "Create project: Ansible POC Packages"
      ansible.controller.project:
        name: "POC"
        organization: "POC"
        scm_type: git
        scm_url: "{{ scm_url }}"
        scm_branch: main
        credential: "Ansible POC Packages Source Control"
        scm_update_on_launch: true
        controller_oauthtoken: "{{ controller_oauthtoken }}"
        validate_certs: false
      register: ansible_poc_packages_project

      # Customer will need to enter their own hostnames and groups and vars:
    - name: "Create inventory: Ansible POC Packages"
      ansible.controller.inventory:
        name: "POC"
        description: "This inventory name/description can be changed after bootstrap"
        organization: "POC"
        validate_certs: false
        controller_oauthtoken: "{{ controller_oauthtoken }}"
      register: inventory

    - name: "Create job templates: Ansible Controller job templates for each tag"
      ansible.controller.job_template:
        name: "{{ poc_package }} - {{ item }}"
        description: "WARNING: removing tags may produce undesirable results"
        organization: "POC"
        project: "POC"
        playbook: "playbooks/{{ poc_package }}/{{ poc_package }}.yml"
        # credential: "Ansible POC Packages Controller" # undefined as guardrail
        ask_credential_on_launch: true # defined as guardrail
        # inventory: "Ansible POC Packages" # undefined as guardrail
        ask_inventory_on_launch: true # defined as guardrail
        limit: "REQUIRED" # defined as guardrail
        ask_limit_on_launch: true # defined as guardrail
        job_type: "run"
        job_tags: "{{ item }}"
        validate_certs: false
        controller_oauthtoken: "{{ controller_oauthtoken }}"
      loop: "{{ job_templates_tags_list }}"
      register: job_templates

    - name: "Create job template: Install Insights Client"
      ansible.controller.job_template:
        name: "{{ poc_package }} - FULL PLAYBOOK: Install Insights Client"
        organization: "POC"
        project: "POC"
        playbook: "playbooks/{{ poc_package }}/install-insights-client.yml"
        # credential: "Ansible POC Packages Controller" # undefined as guardrail
        ask_credential_on_launch: true # defined as guardrail
        # inventory: "Ansible POC Packages" # undefined as guardrail
        ask_inventory_on_launch: true # defined as guardrail
        limit: "REQUIRED" # defined as guardrail
        ask_limit_on_launch: true # defined as guardrail
        job_type: "run"
        validate_certs: false
        controller_oauthtoken: "{{ controller_oauthtoken }}"
      when: poc_package == "rhel_patching"
      register: install_insights_client

    - name: "Create job template: Install Yum Security Updates"
      ansible.controller.job_template:
        name: "{{ poc_package }} - FULL PLAYBOOK: Install Yum Security Updates"
        organization: "POC"
        project: "POC"
        playbook: "playbooks/{{ poc_package }}/install-yum-security-updates.yml"
        # credential: "Ansible POC Packages Controller" # undefined as guardrail
        ask_credential_on_launch: true # defined as guardrail
        # inventory: "Ansible POC Packages" # undefined as guardrail
        ask_inventory_on_launch: true # defined as guardrail
        limit: "REQUIRED" # defined as guardrail
        ask_limit_on_launch: true # defined as guardrail
        job_type: "run"
        validate_certs: false
        controller_oauthtoken: "{{ controller_oauthtoken }}"
      when: poc_package == "rhel_patching"
      register: install_yum_security_updates

    - name: "Create job template: Linux Discovery"
      ansible.controller.job_template:
        name: "{{ poc_package }} - FULL PLAYBOOK: Linux Discovery"
        organization: "POC"
        project: "POC"
        playbook: "playbooks/{{ poc_package }}/linux-discovery.yml"
        # credential: "Ansible POC Packages Controller" # undefined as guardrail
        ask_credential_on_launch: true # defined as guardrail
        # inventory: "Ansible POC Packages" # undefined as guardrail
        ask_inventory_on_launch: true # defined as guardrail
        limit: "REQUIRED" # defined as guardrail
        ask_limit_on_launch: true # defined as guardrail
        job_type: "run"
        validate_certs: false
        controller_oauthtoken: "{{ controller_oauthtoken }}"
      when: poc_package == "rhel_patching"
      register: linux_discovery

