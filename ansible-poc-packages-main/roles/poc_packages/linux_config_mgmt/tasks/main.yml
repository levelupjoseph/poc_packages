---
# tasks file for linux_config_mgmt

- name: Update all packages
  ansible.builtin.yum:
    name: '*'
    state: latest
  tags:
    - update_packages
  vars:
    update_packages_timeout: 1800

- name: Configure SELinux
  ansible.builtin.selinux:
    policy: targeted
    state: "{{ selinux_state }}"
  tags:
    - configure_selinux

- name: Set the timezone
  ansible.builtin.timezone:
    name: "{{ timezone }}"
  tags:
    - set_timezone

- name: Configure NTP
  ansible.builtin.package:
    name: "{{ ntp_package }}"
    state: present
  tags:
    - configure_ntp

- name: Ensure NTP service is running and enabled
  ansible.builtin.service:
    name: "{{ ntp_service }}"
    state: started
    enabled: yes
  tags:
    - configure_ntp

- name: Disable unnecessary services
  ansible.builtin.service:
    name: "{{ item }}"
    state: stopped
    enabled: no
  loop: "{{ disable_services }}"
  tags:
    - disable_unnecessary_services

- name: Enable necessary services
  ansible.builtin.service:
    name: "{{ item }}"
    state: started
    enabled: yes
  loop: "{{ enable_services }}"
  tags:
    - enable_necessary_services

- name: Configure firewall rules
  ansible.builtin.firewalld:
    ansible.builtin.service: "{{ item }}"
    state: enabled
    permanent: yes
    immediate: yes
  loop: "{{ firewalld_services }}"
  tags:
    - configure_firewall

- name: Create user accounts
  ansible.builtin.user:
    name: "{{ item.name }}"
    state: present
    groups: "{{ item.groups }}"
    shell: "{{ item.shell }}"
  loop: "{{ user_accounts }}"
  tags:
    - create_users

- name: Set up SSH key-based authentication
  ansible.builtin.authorized_key:
    user: "{{ item.user }}"
    state: present
    key: "{{ item.key }}"
  loop: "{{ ssh_authorized_keys }}"
  tags:
    - configure_ssh

- name: Add the universe repository
  ansible.builtin.apt_repository:
    repo: "{{ ubuntu_universe_repo }}"
    state: present
  tags:
    - add_universe_repo

- name: Install necessary packages
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  loop: "{{ ubuntu_packages }}"
  tags:
    - install_packages

- name: Remove unnecessary packages
  ansible.builtin.apt:
    name: "{{ item }}"
    state: absent
  loop: "{{ ubuntu_remove_packages }}"
  tags:
    - remove_packages

- name: Configure UFW firewall
  ansible.builtin.ufw:
    rule: allow
    name: "{{ item }}"
    state: enabled
  loop: "{{ ufw_services }}"
  tags:
    - configure_ufw

- name: Upgrade all packages to the latest version
  ansible.builtin.apt:
    upgrade: "{{ ubuntu_upgrade }}"
  tags:
    - upgrade_packages

# - name: Ensure password complexity rules are set
#   replace:
#     path: /etc/security/pwquality.conf
#     regexp: "^(\s*)minlen\s*=\s*(\S+)"
#     replace: "\g<1>minlen = {{ rhel_password_minlen }}"
#   tags:
#     - password_complexity

- name: Configure password expiration policies
  ansible.builtin.lineinfile:
    dest: /etc/login.defs
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop: "{{ password_expiration_policies }}"
  tags:
    - password_expiration

- name: Ensure sysctl settings for network hardening
  ansible.builtin.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    sysctl_set: yes
    ignoreerrors: no
    reload: yes
  loop: "{{ rhel_sysctl_settings }}"
  tags:
    - sysctl_hardening

- name: Ensure auditd is installed, enabled, and running
  ansible.builtin.package:
    name: audit
    state: present
  tags:
    - auditd_install

- name: Enable and start auditd service
  ansible.builtin.service:
    name: auditd
    state: started
    enabled: yes
  tags:
    - auditd_service

- name: Ensure SELinux is installed
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop: "{{ selinux_packages }}"
  tags:
    - selinux_install

- name: Ensure SELinux policy utilities are installed
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop: "{{ selinux_policy_utilities }}"
  tags:
    - selinux_policy_utilities

- name: Set SELinux booleans
  ansible.builtin.seboolean:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
    persistent: yes
  loop: "{{ selinux_booleans }}"
  tags:
    - set_selinux_booleans

- name: Manage SELinux file contexts
  ansible.builtin.sefcontext:
    target: "{{ item.target }}"
    setype: "{{ item.setype }}"
    ftype: "{{ item.ftype }}"
    state: "{{ item.state }}"
  loop: "{{ selinux_file_contexts }}"
  tags:
    - manage_selinux_file_contexts

- name: Restore SELinux file contexts
  ansible.builtin.command:
    cmd: restorecon -Rv "{{ item }}"
  loop: "{{ selinux_restore_paths }}"
  tags:
    - restore_selinux_file_contexts

- name: Add user groups
  ansible.builtin.group:
    name: "{{ item }}"
    state: present
  loop: "{{ user_groups }}"
  tags:
    - add_user_groups

- name: Remove user accounts
  ansible.builtin.user:
    name: "{{ item }}"
    state: absent
    remove: yes
  loop: "{{ remove_user_accounts }}"
  tags:
    - remove_users

- name: Lock user accounts
  ansible.builtin.user:
    name: "{{ item }}"
    password_lock: yes
  loop: "{{ lock_user_accounts }}"
  tags:
    - lock_users

- name: Unlock user accounts
  ansible.builtin.user:
    name: "{{ item }}"
    password_lock: no
  loop: "{{ unlock_user_accounts }}"
  tags:
    - unlock_users

- name: Set password expiration for user accounts
  ansible.builtin.command:
    cmd: "chage -M {{ item.days }} {{ item.user }}"
  loop: "{{ password_expiration_users }}"
  tags:
    - set_password_expiration

# Services
- name: Install services
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop: "{{ install_services }}"
  tags:
    - install_services

- name: Remove services
  ansible.builtin.package:
    name: "{{ item }}"
    state: absent
  loop: "{{ remove_services }}"
  tags:
    - remove_services

- name: Restart services
  ansible.builtin.service:
    name: "{{ item }}"
    state: restarted
  loop: "{{ restart_services }}"
  tags:
    - restart_services

- name: Reload services
  ansible.builtin.service:
    name: "{{ item }}"
    state: reloaded
  loop: "{{ reload_services }}"
  tags:
    - reload_services

- name: Mask services
  ansible.builtin.systemd:
    name: "{{ item }}"
    masked: yes
  loop: "{{ mask_services }}"
  tags:
    - mask_services

- name: Set default target to multi-user
  ansible.builtin.command:
    cmd: systemctl set-default multi-user.target
  tags:
    - set_default_target

- name: Configure GRUB timeout
  ansible.builtin.lineinfile:
    dest: /etc/default/grub
    regexp: '^GRUB_TIMEOUT='
    line: 'GRUB_TIMEOUT={{ grub_timeout }}'
  tags:
    - configure_grub_timeout

- name: Configure GRUB command line
  ansible.builtin.lineinfile:
    dest: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX='
    line: 'GRUB_CMDLINE_LINUX="{{ grub_cmdline_linux }}"'
  tags:
    - configure_grub_cmdline

- name: Generate GRUB configuration
  ansible.builtin.command:
    cmd: grub2-mkconfig -o /boot/grub2/grub.cfg
  tags:
    - generate_grub_config

- name: Disable unnecessary system services at boot
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: no
  loop: "{{ disable_boot_services }}"
  tags:
    - disable_boot_services

- name: Install required packages for LVM
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop: "{{ lvm_packages }}"
  tags:
    - install_lvm_packages

- name: Create Physical Volume
  ansible.builtin.lvg:
    vg: "{{ item.vg }}"
    pvs: "{{ item.pvs }}"
  loop: "{{ physical_volumes }}"
  tags:
    - create_physical_volume

- name: Create Volume Group
  ansible.builtin.lvg:
    vg: "{{ item.vg }}"
    pvs: "{{ item.pvs }}"
  loop: "{{ volume_groups }}"
  tags:
    - create_volume_group

- name: Create Logical Volume
  ansible.builtin.lvol:
    vg: "{{ item.vg }}"
    lv: "{{ item.lv }}"
    size: "{{ item.size }}"
  loop: "{{ logical_volumes }}"
  tags:
    - create_logical_volume

- name: Create filesystem on Logical Volume
  ansible.builtin.filesystem:
    fstype: "{{ item.fstype }}"
    dev: "{{ item.dev }}"
  loop: "{{ filesystems }}"
  tags:
    - create_filesystem
