---
# tasks file for windows_automation

- name: Install Windows features
  ansible.windows.win_feature:
    name: "{{ install_features }}"
    state: present
  tags:
    - install_features

- name: Create local user
  ansible.windows.win_user:
    name: "{{ create_user_name }}"
    password: "{{ create_user_password }}"
    state: present
    groups: "{{ create_user_groups }}"
  tags:
    - create_user

- name: Install and start Windows services
  ansible.windows.win_service:
    name: "{{ service_name }}"
    state: started
    start_mode: auto
    path: "{{ service_path }}"
  tags:
    - manage_service

# - name: Configure Windows firewall rules
#   ansible.windows.win_firewall_rule:
#     name: "{{ firewall_rule_name }}"
#     localport: "{{ firewall_rule_localport }}"
#     direction: "{{ firewall_rule_direction }}"
#     action: "{{ firewall_rule_action }}"
#     state: present
#   tags:
#     - configure_firewall

# - name: Create and configure scheduled task
#   ansible.windows.win_scheduled_task:
#     name: "{{ scheduled_task_name }}"
#     description: "{{ scheduled_task_description }}"
#     actions: "{{ scheduled_task_actions }}"
#     triggers: "{{ scheduled_task_triggers }}"
#     state: present
#   tags:
#     - scheduled_task

- name: Set registry values
  ansible.windows.win_regedit:
    path: "{{ registry_path }}"
    name: "{{ registry_name }}"
    data: "{{ registry_data }}"
    state: present
  tags:
    - registry

- name: Copy files to the remote host
  ansible.windows.win_copy:
    src: "{{ copy_src }}"
    dest: "{{ copy_dest }}"
  tags:
    - copy_files

- name: Create and manage shares
  ansible.windows.win_share:
    name: "{{ share_name }}"
    path: "{{ share_path }}"
    state: "{{ share_state }}"
  tags:
    - manage_share

- name: Run a PowerShell script
  ansible.windows.win_shell: "{{ powershell_script }}"
  tags:
    - run_powershell

- name: Install and manage Windows updates
  ansible.windows.win_updates:
    category_names: "{{ update_categories }}"
    state: installed
  tags:
    - windows_updates

- name: Ensure Chocolatey is installed
  ansible.windows.win_shell: |
    if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
      Set-ExecutionPolicy Bypass -Scope Process -Force;
      [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;
      iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
    }
  tags:
    - install_chocolatey

# - name: Install packages with Chocolatey
#   ansible.windows.win_chocolatey:
#     name: "{{ choco_packages }}"
#     state: present
#   tags:
#     - install_packages

# - name: Upgrade packages with Chocolatey
#   ansible.windows.win_chocolatey:
#     name: "{{ choco_packages }}"
#     state: latest
#   tags:
#     - upgrade_packages

# - name: Uninstall packages with Chocolatey
#   ansible.windows.win_chocolatey:
#     name: "{{ choco_packages_uninstall }}"
#     state: absent
#   tags:
#     - uninstall_packages

# - name: Configure Chocolatey sources
#   ansible.windows.win_chocolatey_source:
#     name: "{{ choco_source_name }}"
#     source: "{{ choco_source_url }}"
#     state: "{{ choco_source_state }}"
#   tags:
#     - configure_sources

- name: Install WSUS role
  ansible.windows.win_feature:
    name: "{{ wsus_role }}"
    state: present
  tags:
    - install_wsus_role

- name: Configure WSUS
  ansible.windows.win_shell: "{{ wsus_configure_command }}"
  tags:
    - configure_wsus

- name: Configure WSUS products
  ansible.windows.win_shell: "{{ wsus_products_command }}"
  tags:
    - configure_wsus_products

- name: Configure WSUS update classifications
  ansible.windows.win_shell: "{{ wsus_classifications_command }}"
  tags:
    - configure_wsus_classifications

- name: Configure automatic approval rules in WSUS
  ansible.windows.win_shell: "{{ wsus_approval_rules_command }}"
  tags:
    - configure_wsus_approval_rules

- name: Stop SCCM Client services
  ansible.windows.win_service:
    name: "{{ item }}"
    state: stopped
  loop:
    - CcmExec
    - smstsmgr
  tags:
    - stop_sccm_services

- name: Uninstall SCCM Client
  ansible.windows.win_package:
    path: "{{ sccm_client_path }}\\ccmsetup.exe"
    arguments: "/uninstall"
    state: absent
  tags:
    - uninstall_sccm_client

- name: Remove SCCM Client directories
  ansible.windows.win_file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ sccm_client_path }}"
    - "{{ sccm_client_cache_path }}"
  tags:
    - remove_sccm_directories

- name: Remove SCCM Client registry keys
  ansible.windows.win_regedit:
    path: "{{ item }}"
    state: absent
  loop:
    - "HKLM:\\Software\\Microsoft\\CCM"
    - "HKLM:\\Software\\Microsoft\\CCMSetup"
  tags:
    - remove_sccm_registry_keys

- name: Restart computer to complete removal
  ansible.windows.win_reboot:
  tags:
    - restart_computer
